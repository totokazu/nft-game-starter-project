[{"/home/totokazu/unchain1/ETH-NFT-game/nft-game-starter-project/src/index.js":"1","/home/totokazu/unchain1/ETH-NFT-game/nft-game-starter-project/src/App.js":"2","/home/totokazu/unchain1/ETH-NFT-game/nft-game-starter-project/src/Components/SelectCharacter/index.js":"3","/home/totokazu/unchain1/ETH-NFT-game/nft-game-starter-project/src/constants.js":"4","/home/totokazu/unchain1/ETH-NFT-game/nft-game-starter-project/src/Components/Arena/index.js":"5","/home/totokazu/unchain1/ETH-NFT-game/nft-game-starter-project/src/Components/LoadingIndicator/index.js":"6"},{"size":219,"mtime":1648453506110,"results":"7","hashOfConfig":"8"},{"size":5723,"mtime":1649993938848,"results":"9","hashOfConfig":"8"},{"size":4917,"mtime":1649992310368,"results":"10","hashOfConfig":"8"},{"size":423,"mtime":1649981987658,"results":"11","hashOfConfig":"8"},{"size":7222,"mtime":1649993043728,"results":"12","hashOfConfig":"8"},{"size":261,"mtime":1648453506110,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"5bdf8e",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/home/totokazu/unchain1/ETH-NFT-game/nft-game-starter-project/src/index.js",[],["29","30"],"/home/totokazu/unchain1/ETH-NFT-game/nft-game-starter-project/src/App.js",["31"],"/home/totokazu/unchain1/ETH-NFT-game/nft-game-starter-project/src/Components/SelectCharacter/index.js",["32"],"import React, { useEffect, useState } from \"react\";\nimport \"./SelectCharacter.css\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport LoadingIndicator from \"../../Components/LoadingIndicator\";\n\nconst SelectCharacter = ({setCharacterNFT}) =>{\n    const [characters, setCharacters] = useState([]);\n    const [gameContract, setGameContract] = useState(null);\n    const [mintingCharacter, setMintingCharacter] = useState(false);\n\n    const mintCharacterNFTAction =(characterId) => async () =>{\n        try{\n            if(gameContract){\n                setMintingCharacter(true);\n                console.log(\"Minting character in progress...\");\n                const mintTxn = await gameContract.mintCharacterNFT(characterId);\n                await mintTxn.wait();\n                console.log(\"mintTxn:\", mintTxn);\n                setMintingCharacter(false);\n            }\n        } catch (error){\n            console.warn(\"MintCharacterAction Error:\",error);\n            setMintingCharacter(false);\n        }\n    }\n    useEffect(() => {\n        const { ethereum } = window;\n        if (ethereum) {\n            const provider = new ethers.providers.Web3Provider(ethereum);\n            const signer = provider.getSigner();\n            const gameContract = new ethers.Contract(\n                CONTRACT_ADDRESS,\n                myEpicGame.abi,\n                signer\n            );\n\n            setGameContract(gameContract);\n            }else {\n                console.log(\"ethereum object not found\");\n            }\n    },[]);\n    useEffect(() => {\n        const getCharacters = async () => {\n            try{\n                console.log(\"getting contract characters to mint\");\n                //ミント可能な全nftキャラクターをコントラクトから呼び出す\n                const charactersTxn = await gameContract.getAllDefaultCharacters();\n                console.log(\"charactersTxn:\",charactersTxn);\n\n                //すべてのnftキャラクターのデータを変換\n                const characters = charactersTxn.map((characterData) =>\n                transformCharacterData(characterData)\n                );\n\n                //ミント可能なすべてのnftキャラクターのstateを設定\n                setCharacters(characters);                \n            } catch(error){\n                console.error(\"something went wrong fetching characters:\",error);\n            }\n        };\n        const onCharacterMint = async (sender, tokenId, characterIndex) =>{\n            console.log(\n                `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n            );\n            if(gameContract){\n                const characterNFT = await gameContract.checkIfUserHasNFT();\n                console.log(\"CharacterNFT: \", characterNFT);\n                setCharacterNFT(transformCharacterData(characterNFT));\n                alert(\n                    `NFT キャラクーが Mint されました -- リンクはこちらです: https://rinkeby.rarible.com/token/${\n                    gameContract.address\n                    }:${tokenId.toNumber()}?tab=details`\n                );\n            }\n        };\n        if(gameContract){\n            getCharacters();\n            gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\n        }\n        return () =>{\n            if (gameContract) {\n                gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\n            }\n        };\n    },[gameContract]);\n    const renderCharacters = () =>\n    characters.map((character, index) => (\n        <div className=\"character-item\" key={character.name}>\n            <div className=\"name-container\">\n                <p>{character.name}</p>\n            </div>\n            <img src={character.imageURI} alt={character.name} />\n            <button\n                type=\"button\"\n                className=\"character-mint-button\"\n                onClick={mintCharacterNFTAction(index)}\n            >{`Mint ${character.name}`}</button>\n        </div>\n    ));\n    return (\n        <div className=\"select-character-container\">\n            <h2>⏬ 一緒に戦う NFT キャラクターを選択 ⏬</h2>\n            {/* キャラクターNFTがフロントエンド上で読み込めている際に、下記を表示します*/}\n            {characters.length > 0 && (\n                <div className=\"character-grid\">{renderCharacters()}</div>\n            )}\n            {mintingCharacter && (\n                <div className=\"loading\">\n                    <div className=\"indicator\">\n                        <LoadingIndicator />\n                        <p>Minting In Progress...</p>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default SelectCharacter;","/home/totokazu/unchain1/ETH-NFT-game/nft-game-starter-project/src/constants.js",[],"/home/totokazu/unchain1/ETH-NFT-game/nft-game-starter-project/src/Components/Arena/index.js",["33"],"import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport \"./Arena.css\";\nimport LoadingIndicator from \"../LoadingIndicator\";\n\n// フロントエンドにNFTキャラクターを表示するため、characterNFTのメタデータを渡します。\nconst Arena = ({ characterNFT , setCharacterNFT }) => {\n  // コントラクトのデータを保有する状態変数を初期化します。\n    const [gameContract, setGameContract] = useState(null);\n    const [boss, setBoss] = useState(null);\n    const [attackState, setAttackState] = useState(\"\");\n    const [showToast, setShowToast] = useState(false);\n\n    const runAttackAction = async () => {\n        try {\n            // コントラクトが呼び出されたことを確認します。\n            if (gameContract) {\n              // attackState の状態を attacking に設定します。\n                setAttackState(\"attacking\");\n                console.log(\"Attacking boss...\");\n        \n              // NFT キャラクターがボスを攻撃します。\n                const attackTxn = await gameContract.attackBoss();\n        \n              // トランザクションがマイニングされるまで待ちます。\n                await attackTxn.wait();\n                console.log(\"attackTxn:\", attackTxn);\n        \n              // attackState の状態を hit に設定します。\n                setAttackState(\"hit\");\n\n                // 攻撃ダメージの表示をtrueに設定し（表示）、5秒後にfalseに設定する（非表示)\n                setShowToast(true);\n                setTimeout(() => {\n                    setShowToast(false);\n                }, 5000);\n            }\n        } catch (error) {\n            console.error(\"Error attacking boss:\", error);\n            setAttackState(\"\");\n        }\n    };\n\n    // ページがロードされると下記が実行されます。\n    useEffect(() => {\n        // コントラクトからボスのメタデータを取得し、bossを設定する非同期関数 fetchBoss を設定します。\n        const fetchBoss = async () => {\n            const bossTxn = await gameContract.getBigBoss();\n            console.log(\"Boss:\", bossTxn);\n            setBoss(transformCharacterData(bossTxn));\n        };\n        // AttackCompleteイベントを受信したときに起動するコールバックメソッドを追加します。\n        const onAttackComplete = (newBossHp, newPlayerHp) => {\n            // ボスの新しいHPを取得します。\n            const bossHp = newBossHp.toNumber();\n            // NFT キャラクターの新しいHPを取得します。\n            const playerHp = newPlayerHp.toNumber();\n            console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n\n            // NFT キャラクターとボスのHPを更新します。\n            setBoss((prevState) => {\n                return { ...prevState, hp: bossHp };\n            });\n            setCharacterNFT((prevState) => {\n                return { ...prevState, hp: playerHp };\n            });\n        };\n\n        // コントラクトが呼び出されていたら、下記を実行します。\n        if (gameContract) {\n            fetchBoss();\n            // リスナーの設定：ボスが攻撃された通知を受け取ります。\n            gameContract.on(\"AttackComplete\", onAttackComplete);\n        }\n\n        // コンポーネントがマウントされたら、リスナーを停止する。\n        return () => {\n            if (gameContract) {\n                gameContract.off(\"AttackComplete\", onAttackComplete);\n            }\n        };\n    }, [gameContract]);\n  // ページがロードされると下記が実行されます。\n    useEffect(() => {\n        const { ethereum } = window;\n        if (ethereum) {\n            const provider = new ethers.providers.Web3Provider(ethereum);\n            const signer = provider.getSigner();\n            const gameContract = new ethers.Contract(\n                CONTRACT_ADDRESS,\n                myEpicGame.abi,\n                signer\n            );\n            setGameContract(gameContract);\n        } else {\n            console.log(\"Ethereum object not found\");\n        }\n    }, []);\n    return (\n        <div className=\"arena-container\">\n            {boss && characterNFT && (\n                <div id=\"toast\" className={showToast ? \"show\" : \"\"}>\n                    <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\n                </div>\n    )}\n          {/* ボスをレンダリングします */}\n            {boss && (\n                <div className=\"boss-container\">\n                    <div className={`boss-content ${attackState}`}>\n                        <h2>🔥 {boss.name} 🔥</h2>\n                        <div className=\"image-content\">\n                            <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\n                            <div className=\"health-bar\">\n                                <progress value={boss.hp} max={boss.maxHp} />\n                                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"attack-container\">\n                        <button className=\"cta-button\" onClick={runAttackAction}>\n                            {`💥 Attack ${boss.name}`}\n                        </button>\n                    </div>\n                    {attackState === \"attacking\" && (\n                        <div className=\"loading-indicator\">\n                            <LoadingIndicator />\n                            <p>Attacking ⚔️</p>\n                        </div>\n                    )}\n                </div>\n            )}\n            {/* NFT キャラクター をレンダリングします*/}\n            {characterNFT && (\n                <div className=\"players-container\">\n                    <div className=\"player-container\">\n                        <h2>Your Character</h2>\n                        <div className=\"player\">\n                            <div className=\"image-content\">\n                                <h2>{characterNFT.name}</h2>\n                                <img\n                                    src={characterNFT.imageURI}\n                                    alt={`Character ${characterNFT.name}`}\n                                />\n                                <div className=\"health-bar\">\n                                    <progress value={characterNFT.hp} max={characterNFT.maxHp} />\n                                    <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n                                </div>\n                            </div>\n                            <div className=\"stats\">\n                                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\nexport default Arena;","/home/totokazu/unchain1/ETH-NFT-game/nft-game-starter-project/src/Components/LoadingIndicator/index.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":112,"column":5,"nodeType":"40","endLine":112,"endColumn":7,"suggestions":"41"},{"ruleId":"38","severity":1,"message":"42","line":87,"column":7,"nodeType":"40","endLine":87,"endColumn":21,"suggestions":"43"},{"ruleId":"38","severity":1,"message":"42","line":84,"column":8,"nodeType":"40","endLine":84,"endColumn":22,"suggestions":"44"},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkIfWalletIsConnected'. Either include it or remove the dependency array.","ArrayExpression",["47"],"React Hook useEffect has a missing dependency: 'setCharacterNFT'. Either include it or remove the dependency array. If 'setCharacterNFT' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["48"],["49"],"no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},{"desc":"52","fix":"53"},{"desc":"52","fix":"54"},"Update the dependencies array to be: [checkIfWalletIsConnected]",{"range":"55","text":"56"},"Update the dependencies array to be: [gameContract, setCharacterNFT]",{"range":"57","text":"58"},{"range":"59","text":"58"},[3421,3423],"[checkIfWalletIsConnected]",[3452,3466],"[gameContract, setCharacterNFT]",[3008,3022]]
{"ast":null,"code":"var _jsxFileName = \"/home/totokazu/unchain1/ETH-NFT-game/nft-game-starter-project/src/Components/SelectCharacter/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./SelectCharacter.css\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectCharacter = _ref => {\n  _s();\n\n  let {\n    setCharacterNFT\n  } = _ref;\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n\n  const mintCharacterNFTAction = characterId => async () => {\n    try {\n      if (gameContract) {\n        console.log(\"Minting character in progress...\");\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log(\"mintTxn:\", mintTxn);\n      }\n    } catch (error) {\n      console.warn(\"MintCharacterAction Error:\", error);\n    }\n  };\n\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer);\n      setGameContract(gameContract);\n    } else {\n      console.log(\"ethereum object not found\");\n    }\n  }, []);\n  useEffect(() => {\n    const getCharacters = async () => {\n      try {\n        console.log(\"getting contract characters to mint\"); //ミント可能な全nftキャラクターをコントラクトから呼び出す\n\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log(\"charactersTxn:\", charactersTxn); //すべてのnftキャラクターのデータを変換\n\n        const characters = charactersTxn.map(characterData => transformCharacterData(characterData)); //ミント可能なすべてのnftキャラクターのstateを設定\n\n        setCharacters(characters);\n      } catch (error) {\n        console.error(\"something went wrong fetching characters:\", error);\n      }\n    };\n\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(`CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`);\n\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log(\"CharacterNFT: \", characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n        alert(`NFT キャラクーが Mint されました -- リンクはこちらです: https://rinkeby.rarible.com/token/${gameContract.address}:${tokenId.toNumber()}?tab=details`);\n      }\n    };\n\n    if (gameContract) {\n      getCharacters();\n      gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\n    }\n\n    return () => {\n      if (gameContract) {\n        gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\n      }\n    };\n  }, [gameContract]);\n\n  const renderCharacters = () => characters.map((character, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"character-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"name-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: character.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: character.imageURI,\n      alt: character.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"character-mint-button\",\n      onClick: mintCharacterNFTAction(index),\n      children: `Mint ${character.name}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, character.name, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this));\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"select-character-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u23EC \\u4E00\\u7DD2\\u306B\\u6226\\u3046 NFT \\u30AD\\u30E3\\u30E9\\u30AF\\u30BF\\u30FC\\u3092\\u9078\\u629E \\u23EC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), characters.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"character-grid\",\n      children: renderCharacters()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SelectCharacter, \"ReBpEb1ZDzzSsIn8oOlkhmevdME=\");\n\n_c = SelectCharacter;\nexport default SelectCharacter;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectCharacter\");","map":{"version":3,"sources":["/home/totokazu/unchain1/ETH-NFT-game/nft-game-starter-project/src/Components/SelectCharacter/index.js"],"names":["React","useEffect","useState","ethers","CONTRACT_ADDRESS","transformCharacterData","myEpicGame","SelectCharacter","setCharacterNFT","characters","setCharacters","gameContract","setGameContract","mintCharacterNFTAction","characterId","console","log","mintTxn","mintCharacterNFT","wait","error","warn","ethereum","window","provider","providers","Web3Provider","signer","getSigner","Contract","abi","getCharacters","charactersTxn","getAllDefaultCharacters","map","characterData","onCharacterMint","sender","tokenId","characterIndex","toNumber","characterNFT","checkIfUserHasNFT","alert","address","on","off","renderCharacters","character","index","name","imageURI","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./SelectCharacter.css\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\n\nconst SelectCharacter = ({setCharacterNFT}) =>{\n    const [characters, setCharacters] = useState([]);\n    const [gameContract, setGameContract] = useState(null);\n\n    const mintCharacterNFTAction =(characterId) => async () =>{\n        try{\n            if(gameContract){\n                console.log(\"Minting character in progress...\");\n                const mintTxn = await gameContract.mintCharacterNFT(characterId);\n                await mintTxn.wait();\n                console.log(\"mintTxn:\", mintTxn);\n            }\n        } catch (error){\n            console.warn(\"MintCharacterAction Error:\",error);\n        }\n    }\n    useEffect(() => {\n        const { ethereum } = window;\n        if (ethereum) {\n            const provider = new ethers.providers.Web3Provider(ethereum);\n            const signer = provider.getSigner();\n            const gameContract = new ethers.Contract(\n                CONTRACT_ADDRESS,\n                myEpicGame.abi,\n                signer\n            );\n\n            setGameContract(gameContract);\n            }else {\n                console.log(\"ethereum object not found\");\n            }\n    },[]);\n    useEffect(() => {\n        const getCharacters = async () => {\n            try{\n                console.log(\"getting contract characters to mint\");\n                //ミント可能な全nftキャラクターをコントラクトから呼び出す\n                const charactersTxn = await gameContract.getAllDefaultCharacters();\n                console.log(\"charactersTxn:\",charactersTxn);\n\n                //すべてのnftキャラクターのデータを変換\n                const characters = charactersTxn.map((characterData) =>\n                transformCharacterData(characterData)\n                );\n\n                //ミント可能なすべてのnftキャラクターのstateを設定\n                setCharacters(characters);                \n            } catch(error){\n                console.error(\"something went wrong fetching characters:\",error);\n            }\n        };\n        const onCharacterMint = async (sender, tokenId, characterIndex) =>{\n            console.log(\n                `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n            );\n            if(gameContract){\n                const characterNFT = await gameContract.checkIfUserHasNFT();\n                console.log(\"CharacterNFT: \", characterNFT);\n                setCharacterNFT(transformCharacterData(characterNFT));\n                alert(\n                    `NFT キャラクーが Mint されました -- リンクはこちらです: https://rinkeby.rarible.com/token/${\n                    gameContract.address\n                    }:${tokenId.toNumber()}?tab=details`\n                );\n            }\n        };\n        if(gameContract){\n            getCharacters();\n            gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\n        }\n        return () =>{\n            if (gameContract) {\n                gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\n            }\n        };\n    },[gameContract]);\n    const renderCharacters = () =>\n    characters.map((character, index) => (\n        <div className=\"character-item\" key={character.name}>\n            <div className=\"name-container\">\n                <p>{character.name}</p>\n            </div>\n            <img src={character.imageURI} alt={character.name} />\n            <button\n                type=\"button\"\n                className=\"character-mint-button\"\n                onClick={mintCharacterNFTAction(index)}\n            >{`Mint ${character.name}`}</button>\n        </div>\n    ));\n    return (\n        <div className=\"select-character-container\">\n            <h2>⏬ 一緒に戦う NFT キャラクターを選択 ⏬</h2>\n            {/* キャラクターNFTがフロントエンド上で読み込めている際に、下記を表示します*/}\n            {characters.length > 0 && (\n                <div className=\"character-grid\">{renderCharacters()}</div>\n            )}\n        </div>\n    );\n};\n\nexport default SelectCharacter;"]},"metadata":{},"sourceType":"module"}
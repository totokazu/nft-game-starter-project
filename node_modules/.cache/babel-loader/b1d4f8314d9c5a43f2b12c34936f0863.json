{"ast":null,"code":"var _jsxFileName = \"/home/totokazu/unchain1/ETH-NFT-game/nft-game-starter-project/src/App.js\",\n    _s = $RefreshSig$();\n\nimport myEpicGame from './utils/MyEpicGame.json';\nimport React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport './App.css';\nimport './Components/SelectCharacter';\nimport SelectCharacter from \"./Components/SelectCharacter\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\nimport { ethers } from 'ethers'; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'あなたのTwitterハンドル';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n\n  const checkNetwork = async () => {\n    try {\n      if (window.ethereum.networkVersion !== '4') {\n        alert(\"Rinkeby Test Network に接続してください!\");\n      } else {\n        console.log(\"Rinkeby に接続されています.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask\");\n        return;\n      } else {\n        console.log(\"we have the ethereum object\", ethereum);\n        const accounts = await ethereum.request({\n          method: 'eth_accounts'\n        });\n\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log(\"found an authorized account\", account);\n          setCurrentAccount(account);\n          checkNetwork();\n        } else {\n          console.log(\"No authorized account found\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWalletAction = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert('get metamask');\n        return;\n      }\n\n      checkIfWalletIsConnected();\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      console.log(\"connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      checkNetwork();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const renderContent = () => {\n    // シナリオ1.\n    // ユーザーがWEBアプリにログインしていない場合、WEBアプリ上に、\"Connect Wallet to Get Started\" ボタンを表示します。\n    if (!currentAccount) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connect-wallet-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://i.imgur.com/yMocj5x.png\",\n          alt: \"Pikachu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button connect-wallet-button\",\n          onClick: connectWalletAction,\n          children: \"Connect Wallet to Get Started\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this); // シナリオ2.\n      // ユーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っていない場合、WEBアプリ上に、を表示します。\n    } else if (currentAccount && !characterNFT) {\n      return /*#__PURE__*/_jsxDEV(SelectCharacter, {\n        setCharacterNFT: setCharacterNFT\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 14\n      }, this);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  useEffect(() => {\n    const fetchNFTMetadata = async () => {\n      console.log('Checking for Character NFT on address:', currentAccount);\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer);\n      const txn = await gameContract.checkIfUserHasNFT();\n      console.log(txn);\n\n      if (txn.name) {\n        console.log(\"user has character\");\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log('no character NFT found');\n      }\n    };\n\n    if (currentAccount) {\n      console.log(\"currentAccount:\", currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"\\u26A1\\uFE0F METAVERSE GAME \\u26A1\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"\\u30D7\\u30EC\\u30A4\\u30E4\\u30FC\\u3068\\u5354\\u529B\\u3057\\u3066\\u30DC\\u30B9\\u3092\\u5012\\u305D\\u3046\\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), renderContent()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built with @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"2bZvcxjYXpeQLBDoinrZPDHvwx8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/totokazu/unchain1/ETH-NFT-game/nft-game-starter-project/src/App.js"],"names":["myEpicGame","React","useEffect","useState","SelectCharacter","CONTRACT_ADDRESS","transformCharacterData","ethers","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","characterNFT","setCharacterNFT","checkNetwork","window","ethereum","networkVersion","alert","console","log","error","checkIfWalletIsConnected","accounts","request","method","length","account","connectWalletAction","renderContent","fetchNFTMetadata","provider","providers","Web3Provider","signer","getSigner","gameContract","Contract","abi","txn","checkIfUserHasNFT","name","twitterLogo"],"mappings":"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","sourcesContent":["import myEpicGame from './utils/MyEpicGame.json';\nimport React, { useEffect, useState } from \"react\";\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport './Components/SelectCharacter';\nimport SelectCharacter from \"./Components/SelectCharacter\";\nimport {CONTRACT_ADDRESS, transformCharacterData} from './constants';\nimport {ethers} from 'ethers';\n\n// Constants\nconst TWITTER_HANDLE = 'あなたのTwitterハンドル';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  const [currentAccount,setCurrentAccount] =useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n\n  const checkNetwork = async () => {\n    try {\n      if (window.ethereum.networkVersion !== '4') {\n      alert(\"Rinkeby Test Network に接続してください!\")\n      } else {\n      console.log(\"Rinkeby に接続されています.\")\n      }\n    } catch(error) {\n      console.log(error)\n    }\n  }\n\n  const checkIfWalletIsConnected = async () =>{\n    try{\n      const {ethereum} = window;\n      if(!ethereum){\n        console.log(\"Make sure you have metamask\");\n        return;\n      }else{\n        console.log(\"we have the ethereum object\", ethereum);\n        const accounts = await ethereum.request({method:'eth_accounts'});\n        if(accounts.length !== 0){\n          const account = accounts[0];\n          console.log(\"found an authorized account\",account)\n          setCurrentAccount(account);\n          checkNetwork()\n        }else{\n          console.log(\"No authorized account found\");\n        }\n      }\n    }catch (error){\n      console.log(error);\n\n    }\n  };\n  const connectWalletAction = async () => {\n    try{\n      const {ethereum} = window;\n      if(!ethereum){\n        alert('get metamask');\n        return;\n      }\n      checkIfWalletIsConnected();\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n      console.log(\"connected\",accounts[0]);\n      setCurrentAccount(accounts[0]);\n      checkNetwork();\n    }catch (error){\n      console.log(error);\n    }\n  };\n\n  const renderContent = () => {\n    // シナリオ1.\n    // ユーザーがWEBアプリにログインしていない場合、WEBアプリ上に、\"Connect Wallet to Get Started\" ボタンを表示します。\n    if (!currentAccount) {\n      return (\n        <div className=\"connect-wallet-container\">\n          <img src=\"https://i.imgur.com/yMocj5x.png\" alt=\"Pikachu\" />\n          <button\n            className=\"cta-button connect-wallet-button\"\n            onClick={connectWalletAction}\n          >\n            Connect Wallet to Get Started\n          </button>\n        </div>\n      );\n      // シナリオ2.\n      // ユーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っていない場合、WEBアプリ上に、を表示します。\n    } else if (currentAccount && !characterNFT) {\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n    }\n  };\n  useEffect(() =>{\n    checkIfWalletIsConnected();\n  },[]);\n\n  useEffect(() => {\n    const fetchNFTMetadata =async () => {\n      console.log('Checking for Character NFT on address:', currentAccount);\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n      const txn = await gameContract.checkIfUserHasNFT();\n      console.log(txn);\n      if(txn.name){\n        console.log(\"user has character\");\n        setCharacterNFT(transformCharacterData(txn));\n      }else {\n        console.log('no character NFT found');\n      }\n    };\n      if(currentAccount){\n        console.log(\"currentAccount:\", currentAccount);\n        fetchNFTMetadata();\n      }\n  },[currentAccount]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">⚡️ METAVERSE GAME ⚡️</p>\n          <p className=\"sub-text\">プレイヤーと協力してボスを倒そう✨</p>\n          {renderContent()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built with @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}